{"ast":null,"code":"const PUNCTUATION_LIST = ['.', ',', '!', '?', \"'\", '{', '}', '(', ')', '[', ']', '/'];\nconst spaceMatch = character => {\n  if (character === ' ') {\n    return true;\n  }\n};\nconst punctuationMatch = (idx, text) => {\n  const punctuationIdx = PUNCTUATION_LIST.indexOf(text[idx]);\n  if (punctuationIdx >= 0 && spaceMatch(text[idx + 1])) {\n    return true;\n  }\n};\nconst checkMatch = (idx, text, max, min) => {\n  if (idx < max && idx > min && punctuationMatch(idx, text)) {\n    return true;\n  }\n};\nconst trimText = function (text) {\n  let min = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 80;\n  let ideal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 100;\n  let max = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 200;\n  if (max < min || ideal > max || ideal < min) {\n    throw new Error('The minimum length must be less than the maximum, and the ideal must be between the minimum and maximum.');\n  }\n  if (text.length < ideal) {\n    return [text, ''];\n  }\n  let pointerOne = ideal;\n  let pointerTwo = ideal;\n  let firstSpace;\n  let resultIdx;\n  const setSpace = idx => {\n    if (spaceMatch(text[idx])) {\n      firstSpace = firstSpace || idx;\n    }\n  };\n  while (pointerOne < max || pointerTwo > min) {\n    if (checkMatch(pointerOne, text, max, min)) {\n      resultIdx = pointerOne + 1;\n      break;\n    } else if (checkMatch(pointerTwo, text, max, min)) {\n      resultIdx = pointerTwo + 1;\n      break;\n    } else {\n      setSpace(pointerOne);\n      setSpace(pointerTwo);\n    }\n    pointerOne += 1;\n    pointerTwo -= 1;\n  }\n  if (resultIdx === undefined) {\n    if (firstSpace && firstSpace >= min && firstSpace <= max) {\n      resultIdx = firstSpace;\n    } else if (ideal - min < max - ideal) {\n      resultIdx = min;\n    } else {\n      resultIdx = max;\n    }\n  }\n  return [text.slice(0, resultIdx), text.slice(resultIdx).trim()];\n};\nexport default trimText;","map":{"version":3,"names":["PUNCTUATION_LIST","spaceMatch","character","punctuationMatch","idx","text","punctuationIdx","indexOf","checkMatch","max","min","trimText","arguments","length","undefined","ideal","Error","pointerOne","pointerTwo","firstSpace","resultIdx","setSpace","slice","trim"],"sources":["/home/vmo/Desktop/demo/test/project-vtca/full-flim-vn/src/views/components/ReadMore/trimText.js"],"sourcesContent":["const PUNCTUATION_LIST = [\n  '.',\n  ',',\n  '!',\n  '?',\n  \"'\",\n  '{',\n  '}',\n  '(',\n  ')',\n  '[',\n  ']',\n  '/',\n];\n\nconst spaceMatch = (character) => {\n  if (character === ' ') {\n    return true;\n  }\n};\n\nconst punctuationMatch = (idx, text) => {\n  const punctuationIdx = PUNCTUATION_LIST.indexOf(text[idx]);\n  if (punctuationIdx >= 0 && spaceMatch(text[idx + 1])) {\n    return true;\n  }\n};\n\nconst checkMatch = (idx, text, max, min) => {\n  if (idx < max && idx > min && punctuationMatch(idx, text)) {\n    return true;\n  }\n};\n\nconst trimText = (text, min = 80, ideal = 100, max = 200) => {\n  if (max < min || ideal > max || ideal < min) {\n    throw new Error(\n      'The minimum length must be less than the maximum, and the ideal must be between the minimum and maximum.',\n    );\n  }\n\n  if (text.length < ideal) {\n    return [text, ''];\n  }\n\n  let pointerOne = ideal;\n  let pointerTwo = ideal;\n  let firstSpace;\n  let resultIdx;\n\n  const setSpace = (idx) => {\n    if (spaceMatch(text[idx])) {\n      firstSpace = firstSpace || idx;\n    }\n  };\n\n  while (pointerOne < max || pointerTwo > min) {\n    if (checkMatch(pointerOne, text, max, min)) {\n      resultIdx = pointerOne + 1;\n      break;\n    } else if (checkMatch(pointerTwo, text, max, min)) {\n      resultIdx = pointerTwo + 1;\n      break;\n    } else {\n      setSpace(pointerOne);\n      setSpace(pointerTwo);\n    }\n\n    pointerOne += 1;\n    pointerTwo -= 1;\n  }\n\n  if (resultIdx === undefined) {\n    if (firstSpace && firstSpace >= min && firstSpace <= max) {\n      resultIdx = firstSpace;\n    } else if (ideal - min < max - ideal) {\n      resultIdx = min;\n    } else {\n      resultIdx = max;\n    }\n  }\n\n  return [text.slice(0, resultIdx), text.slice(resultIdx).trim()];\n};\n\nexport default trimText;\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}